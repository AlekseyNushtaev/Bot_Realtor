from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart, StateFilter

from bot import bot
from config import ADMIN_ID
from keyboard_creator import create_kb

router =Router()
dct_for_mes = {"studio_buy": "–°—Ç—É–¥–∏—è",
               "apart_2_buy": "2-—É—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞",
               "apart_3_buy": "3-–µ—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∏ –±–æ–ª—å—à–µ",
               "studio_rent": "–°—Ç—É–¥–∏—è",
               "apart_2_rent": "2-—É—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞",
               "apart_3_rent": "3-–µ—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∏ –±–æ–ª—å—à–µ",
               "money_1": "–î–æ 50 000$",
               "money_2": "–û—Ç 50 00$ –¥–æ 75 000$",
               "money_3": "–û—Ç 75 000$"}


class FSMFillForm(StatesGroup):
    fill_name = State()


@router.message(CommandStart())
async def process_start_command(mes: Message):
    await mes.answer_photo(
        photo=FSInputFile("main.jpg"),
        caption="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –æ—Ç –≥–∞—Å—Ç—Ä–æ–ø—Ä–æ–µ–∫—Ç–∞ Cork –≤ –ë–∞—Ç—É–º–∏. "
                "–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å –ø–æ–∏—Å–∫–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ë–∞—Ç—É–º–∏. "
                "–í—Å–µ –ø—Ä–æ—Å—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –í–∞—Å "
                "—Å–∞–º—ã–µ –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–µ–º?",
        reply_markup=create_kb(
            1,
            buy="–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ üè†",
            rent="–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ üèôÔ∏è",
            sell="–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ üíµ",
        )
    )


@router.callback_query(F.data == "yes")
async def restart(cb: CallbackQuery):
    await bot.send_photo(
        cb.from_user.id,
        photo=FSInputFile("main.jpg"),
        caption="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –æ—Ç –≥–∞—Å—Ç—Ä–æ–ø—Ä–æ–µ–∫—Ç–∞ Cork –≤ –ë–∞—Ç—É–º–∏. "
                "–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å –ø–æ–∏—Å–∫–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ë–∞—Ç—É–º–∏. "
                "–í—Å–µ –ø—Ä–æ—Å—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –í–∞—Å "
                "—Å–∞–º—ã–µ –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–µ–º?",
        reply_markup=create_kb(
            1,
            buy="–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ üè†",
            rent="–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ üèôÔ∏è",
            sell="–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ üíµ",
        )
    )


@router.callback_query(F.data.in_({"buy"}))
async def contacts(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã:",
        reply_markup=create_kb(
            1,
            studio_buy="–°—Ç—É–¥–∏—è (–¥–æ 40 –º–µ—Ç—Ä–æ–≤)",
            apart_2_buy="2-—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è (–¥–æ 60 –º–µ—Ç—Ä–æ–≤)",
            apart_3_buy="3-—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è (–¥–æ 90 –º–µ—Ç—Ä–æ–≤)"
        )
    )


@router.callback_query(F.data.in_({"rent"}))
async def contacts(cb: CallbackQuery):
    await cb.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –∞—Ä–µ–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∂–∏–∑–Ω–∏ –≤ –ë–∞—Ç—É–º–∏:",
        reply_markup=create_kb(
            1,
            studio_rent="–°—Ç—É–¥–∏—è (–¥–æ 40 –º–µ—Ç—Ä–æ–≤)",
            apart_2_rent="2-—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è (–¥–æ 60 –º–µ—Ç—Ä–æ–≤)",
            apart_3_rent="3-—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è (–¥–æ 90 –º–µ—Ç—Ä–æ–≤)"
        )
    )


@router.callback_query(F.data == "sell")
async def contacts(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à–µ –∏–º—è –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ ‚ô•Ô∏è")
    await bot.send_message(
        chat_id=ADMIN_ID,
        text="–û–±—Ä–∞—Ç–∏–ª—Å—è:\n"
             f"Username: @{cb.from_user.username}\n"
             f"–£—Å–ª—É–≥–∞: –ü—Ä–æ–¥–∞–∂–∞\n"
    )
    await state.set_state(FSMFillForm.fill_name)


@router.callback_query(F.data.in_({"studio_rent", "apart_2_rent", "apart_3_rent"}))
async def contacts(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à–µ –∏–º—è –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ ‚ô•Ô∏è")
    await bot.send_message(
        chat_id=ADMIN_ID,
        text="–û–±—Ä–∞—Ç–∏–ª—Å—è:\n"
             f"Username: @{cb.from_user.username}\n"
             f"–£—Å–ª—É–≥–∞: –ê—Ä–µ–Ω–¥–∞\n"
             f"–¢–∏–ø: {dct_for_mes[cb.data]}\n"
    )
    await state.set_state(FSMFillForm.fill_name)


@router.callback_query(F.data.in_({"studio_buy", "apart_2_buy", "apart_3_buy"}))
async def contacts(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer(
        text="–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫–≤–∞—Ä—Ç–∏—Ä—ã –í–∞—à–µ–π –º–µ—á—Ç—ã?",
        reply_markup=create_kb(
            1,
            money_1="–î–æ 50 000$",
            money_2="–û—Ç 50 00$ –¥–æ 75 000$",
            money_3="–û—Ç 75 000$"
        )
    )
    await state.update_data(house=cb.data)


@router.callback_query(F.data.in_({"money_1", "money_2", "money_3"}))
async def contacts(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à–µ –∏–º—è –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ ‚ô•Ô∏è")
    dct = await state.get_data()
    await bot.send_message(
        chat_id=ADMIN_ID,
        text="–û–±—Ä–∞—Ç–∏–ª—Å—è:\n"
             f"Username: @{cb.from_user.username}\n"
             f"–£—Å–ª—É–≥–∞: –ü–æ–∫—É–ø–∫–∞\n"
             f"–¢–∏–ø: {dct_for_mes[dct['house']]}\n"
             f"–ë—é–¥–∂–µ—Ç: {dct_for_mes[cb.data]}",
    )
    await state.set_state(FSMFillForm.fill_name)


@router.message(StateFilter(FSMFillForm.fill_name))
async def process_name_sent(message: Message, state: FSMContext):
    await bot.forward_message(chat_id=ADMIN_ID,
                              from_chat_id=message.chat.id,
                              message_id=message.message_id)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ! –°–∫–æ—Ä–æ –º—ã –Ω–∞–ø–∏—à–µ–º –í–∞–º\n\n–•–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å–¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É?',
                         reply_markup=create_kb(1, yes="–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"))
    await state.set_state(default_state)


